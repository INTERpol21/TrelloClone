{"version":3,"sources":["Helper/Util.ts","Components/Common/Chip.tsx","Components/Dropdown/Dropdown.tsx","Components/Modal/Modal.tsx","Components/CustomInput/CustomInput.tsx","asserts/images/user.png","Components/Card/CardInfo/CardInfo.tsx","Components/Card/Card.tsx","Components/Board/Board.tsx","ApiMockData/dummyData.ts","Helper/APILayers.ts","Home/Dashboard.tsx","App.tsx","index.tsx"],"names":["formatDate","value","date","Date","getDate","getMonth","colorsList","Chip","props","item","removeLabel","style","backgroundColor","color","text","onClick","Dropdown","dropdownRef","useRef","handleClick","event","current","contains","target","onClose","useEffect","document","addEventListener","removeEventListener","ref","className","class","children","Modal","stopPropagation","CustomInput","onSubmit","displayClass","editClass","placeholder","defaultValue","buttonText","useState","inputText","setInputText","isCustomInput","setIsCustomInput","e","preventDefault","type","autoFocus","onChange","CardInfo","card","boardId","updateCard","user","selectedColor","setSelectedColor","cardValues","setCardValues","label","tempLabels","labels","filter","id","calculatedPercent","tasks","length","completed","calculatePercent","onKeydown","key","title","desc","messages","map","src","Avatar","alt","IconButton","aria-label","tempTasks","removeCom","message","now","Math","random","min","toISOString","slice","index","findIndex","width","defaultChecked","Boolean","updateTask","checked","removeTask","task","Card","removeCard","onDragEnd","onDragEnter","showDropdown","setShowDropdown","showModal","setShowModal","draggable","Board","board","addCard","removeBoard","cards","ApiMockResponse","LocalStorageKeyName","BoardAPI","a","apiData","localStorage","getItem","localStorageData","JSON","parse","BoardList","updateLocalStorageBoards","fetchBoardList","api","boards","setItem","stringify","Dashboard","setBoards","fetchData","cardId","targetCard","setTargetCard","addCardHandler","boardIndex","tempBoardsList","push","cardIndex","splice","sourceBoardIndex","sourceCardIndex","targetBoardIndex","targetCardIndex","sourceCard","React","open","setOpen","handleClose","setUser","Button","variant","aria-labelledby","aria-describedby","Box","sx","position","top","left","transform","bgcolor","border","boxShadow","p","Typography","component","TextField","name","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.95a43eea.chunk.js","sourcesContent":["export const formatDate = (value: string) => {\r\n  if (!value) return \"\";\r\n  const date = new Date(value);\r\n  if (!date) return \"\";\r\n\r\n  const months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n\r\n  const day = date.getDate();\r\n  const month = months[date.getMonth()];\r\n  return day + \" \" + month;\r\n};\r\nexport const colorsList = [\r\n  \"#a8193d\",\r\n  \"#4fcc25\",\r\n  \"#1ebffa\",\r\n  \"#8da377\",\r\n  \"#9975bd\",\r\n  \"#cf61a1\",\r\n  \"#240959\",\r\n];\r\n","import React from \"react\";\r\nimport { X } from \"react-feather\";\r\nimport { ILabel } from \"../../Interfaces/Kanban\";\r\ninterface ChipProps {\r\n  item: ILabel;\r\n  removeLabel?: (label: ILabel) => void;\r\n}\r\nexport default function Chip(props: ChipProps) {\r\n  const { item, removeLabel } = props;\r\n  return (\r\n    <label style={{ backgroundColor: item.color, color: \"#fff\" }}>\r\n      {item.text}\r\n      {removeLabel && <X onClick={() => removeLabel(item)} />}\r\n    </label>\r\n  );\r\n}\r\n","import React, { useEffect, useRef } from \"react\";\r\n\r\nimport \"./Dropdown.css\";\r\n\r\nfunction Dropdown(props: any) {\r\n  const dropdownRef: any = useRef();\r\n\r\n  const handleClick = (event: any) => {\r\n    if (\r\n      dropdownRef &&\r\n      !dropdownRef.current?.contains(event.target) &&\r\n      props.onClose\r\n    )\r\n      props.onClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"click\", handleClick);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClick);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div\r\n      ref={dropdownRef}\r\n      className={`dropdown custom-scroll ${props.class ? props.class : \"\"}`}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dropdown;\r\n","import React from \"react\";\r\n\r\nimport \"./Modal.css\";\r\n\r\nfunction Modal(props: any) {\r\n  return (\r\n    <div\r\n      className=\"modal\"\r\n      onClick={() => (props.onClose ? props.onClose() : \"\")}\r\n    >\r\n      <div\r\n        className=\"modal-content custom-scroll\"\r\n        onClick={(event) => event.stopPropagation()}\r\n      >\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { X } from \"react-feather\";\r\n\r\nimport \"./CustomInput.css\";\r\ninterface CustomInputProps {\r\n  text: string;\r\n  onSubmit: (value: string) => void;\r\n  displayClass?: string;\r\n  editClass?: string;\r\n  placeholder?: string;\r\n  defaultValue?: string;\r\n  buttonText?: string;\r\n\r\n}\r\n\r\n\r\nfunction CustomInput(props: CustomInputProps) {\r\n  const {\r\n    text,\r\n    onSubmit,\r\n    displayClass,\r\n    editClass,\r\n    placeholder,\r\n    defaultValue,\r\n    buttonText,\r\n  } = props;\r\n\r\n  const [inputText, setInputText] = useState(defaultValue);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputText(event.target.value);\r\n  };\r\n\r\n  const [isCustomInput, setIsCustomInput] = useState(false);\r\n\r\n\r\n  const submission = (e: any) => {\r\n    e.preventDefault();\r\n    if (inputText && onSubmit) {\r\n      setInputText(\"\");\r\n      onSubmit(inputText);\r\n    }\r\n    setIsCustomInput(false);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"custom-input\">\r\n      {isCustomInput ? (\r\n        <form\r\n          className={`custom-input-edit ${editClass ? editClass : \"\"}`}\r\n          onSubmit={submission}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            value={inputText || \"\"}\r\n            placeholder={placeholder || text}\r\n            autoFocus\r\n            onChange={handleChange}\r\n\r\n\r\n          />\r\n          <div className=\"custom-input-edit-footer\">\r\n            <button type=\"submit\">{buttonText || \"Add\"}</button>\r\n            <X onClick={() => setIsCustomInput(false)} className=\"closeIcon\" />\r\n          </div>\r\n        </form>\r\n      ) : (\r\n        <p\r\n          className={`custom-input-display ${displayClass ? displayClass : \"\"}`}\r\n          onClick={() => setIsCustomInput(true)}\r\n        >\r\n          {text}\r\n\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomInput;\r\n","export default __webpack_public_path__ + \"static/media/user.6d9f8e11.png\";","import React, { useEffect, useState } from \"react\";\r\nimport { Calendar, CheckSquare, List, MessageCircle, Tag, Type, XCircle } from \"react-feather\";\r\nimport { colorsList } from \"../../../Helper/Util\";\r\nimport Modal from \"../../Modal/Modal\";\r\nimport CustomInput from \"../../CustomInput/CustomInput\";\r\nimport \"./CardInfo.css\";\r\nimport { ICard, IComment, ILabel, ITask } from \"../../../Interfaces/Kanban\";\r\nimport Chip from \"../../Common/Chip\";\r\nimport Avatar from \"../../../asserts/images/user.png\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\n\r\n\r\ninterface CardInfoProps {\r\n  onClose: () => void;\r\n  card: ICard;\r\n  boardId: number;\r\n  updateCard: (boardId: number, cardId: number, card: ICard) => void;\r\n  user:string\r\n  inputText:string\r\n}\r\n\r\n\r\nfunction CardInfo(props: CardInfoProps) {\r\n  const { onClose, card, boardId, updateCard, user,inputText} = props;\r\n  const [selectedColor, setSelectedColor] = useState(\"\");\r\n  const [cardValues, setCardValues] = useState<ICard>({\r\n    ...card,\r\n  });\r\n\r\n  const updateTitle = (value: string) => {\r\n    setCardValues({ ...cardValues, title: value });\r\n  };\r\n\r\n  const updateDesc = (value: string) => {\r\n\r\n    setCardValues({ ...cardValues, desc: value });\r\n  };\r\n\r\n  // const updateCom = (value: string) => {\r\n  //   setCardValues({ ...cardValues, message: value });\r\n  // };\r\n\r\n  const addCom = (value: string) => {\r\n    const message: IComment = {\r\n      id: Date.now() + Math.random() * 2,\r\n      text: value,\r\n      user:user\r\n    };\r\n\r\n    setCardValues({\r\n      ...cardValues,\r\n      messages: [...cardValues.messages, message],\r\n    });\r\n  };\r\n\r\n  // const updateCom = (id: number) => {\r\n  //   const messages = [...cardValues.messages];\r\n  //\r\n  //   const index = messages.findIndex((item) => item.id === id);\r\n  //   if (index < 0) return;\r\n  //\r\n  //\r\n  //   setCardValues({\r\n  //     ...cardValues,\r\n  //     messages\r\n  //   });\r\n  // };\r\n\r\n  const removeCom = (id: number) => {\r\n    const messages = [...cardValues.messages];\r\n\r\n    const tempTasks = messages.filter((item) => item.id !== id);\r\n    setCardValues({\r\n      ...cardValues,\r\n      messages: tempTasks,\r\n    });\r\n  };\r\n\r\n\r\n  const addLabel = (label: ILabel) => {\r\n    const index = cardValues.labels.findIndex(\r\n      (item) => item.text === label.text,\r\n    );\r\n    if (index > -1) return; //if label text already exist then return\r\n\r\n    setSelectedColor(\"\");\r\n    setCardValues({\r\n      ...cardValues,\r\n      labels: [...cardValues.labels, label],\r\n    });\r\n  };\r\n\r\n  const removeLabel = (label: ILabel) => {\r\n    const tempLabels = cardValues.labels.filter(\r\n      (item) => item.text !== label.text,\r\n    );\r\n\r\n    setCardValues({\r\n      ...cardValues,\r\n      labels: tempLabels,\r\n    });\r\n  };\r\n\r\n  const addTask = (value: string) => {\r\n    const task: ITask = {\r\n      id: Date.now() + Math.random() * 2,\r\n      completed: false,\r\n      text: value,\r\n    };\r\n    setCardValues({\r\n      ...cardValues,\r\n      tasks: [...cardValues.tasks, task],\r\n    });\r\n  };\r\n\r\n  const removeTask = (id: number) => {\r\n    const tasks = [...cardValues.tasks];\r\n\r\n    const tempTasks = tasks.filter((item) => item.id !== id);\r\n    setCardValues({\r\n      ...cardValues,\r\n      tasks: tempTasks,\r\n    });\r\n  };\r\n\r\n  const updateTask = (id: number, value: boolean) => {\r\n    const tasks = [...cardValues.tasks];\r\n\r\n    const index = tasks.findIndex((item) => item.id === id);\r\n    if (index < 0) return;\r\n\r\n    tasks[index].completed = Boolean(value);\r\n\r\n    setCardValues({\r\n      ...cardValues,\r\n      tasks,\r\n    });\r\n  };\r\n\r\n  const calculatePercent = () => {\r\n    if (!cardValues.tasks?.length) return 0;\r\n    const completed = cardValues.tasks?.filter(\r\n      (item) => item.completed,\r\n    )?.length;\r\n    return (completed / cardValues.tasks?.length) * 100;\r\n  };\r\n\r\n  const updateDate = (date: string) => {\r\n    if (!date) return;\r\n\r\n    setCardValues({\r\n      ...cardValues,\r\n      date,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (updateCard) updateCard(boardId, cardValues.id, cardValues);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [cardValues]);\r\n\r\n\r\n  const calculatedPercent = calculatePercent();\r\n  //Информация в popup\r\n\r\n  const onKeydown = ({ key }: KeyboardEvent) => {\r\n    switch (key) {\r\n      case \"Escape\":\r\n        onClose();\r\n        break;\r\n    }\r\n  };\r\n\r\n  // c помощью useEffect цепляем обработчик к нажатию клавиш\r\n  // https://ru.reactjs.org/docs/hooks-effect.html\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", onKeydown);\r\n    return () => document.removeEventListener(\"keydown\", onKeydown);\r\n  });\r\n\r\n\r\n  return (\r\n    <Modal onClose={onClose}>\r\n      <div className=\"cardinfo\">\r\n        <div>Имя автора карточки {user}</div>\r\n        <div>Карточка {inputText}</div>\r\n        <div className=\"cardinfo-box\">\r\n          {/*TITLE*/}\r\n          {/*Добавил выход из окна, по нажатию на X и через клавишу Escape*/}\r\n          <div onClick={onClose} className=\"cardinfo-box-title-circle\">\r\n            <XCircle className=\"cardinfo-box-title-svg-circle\" />\r\n          </div>\r\n          <div className=\"cardinfo-box-title\">\r\n            <Type />\r\n            <p>Title</p>\r\n\r\n          </div>\r\n          <CustomInput\r\n            defaultValue={cardValues.title}\r\n            text={cardValues.title}\r\n            placeholder=\"Enter Title\"\r\n            onSubmit={updateTitle}\r\n          />\r\n        </div>\r\n\r\n        {/*Description*/}\r\n        <div className=\"cardinfo-box\">\r\n          <div className=\"cardinfo-box-title\">\r\n            <List />\r\n            <p>Description</p>\r\n          </div>\r\n          <CustomInput\r\n            defaultValue={cardValues.desc}\r\n            text={cardValues.desc || \"Add a Description\"}\r\n            placeholder=\"Enter description\"\r\n            onSubmit={updateDesc}\r\n          />\r\n        </div>\r\n\r\n        {/*COMMENT*/}\r\n        <div className=\"cardinfo-box\">\r\n          <div className=\"cardinfo-box-title\">\r\n            <MessageCircle />\r\n            <p>Comment</p>\r\n          </div>\r\n\r\n          <div className=\"cardinfo-box-task-list\">\r\n            {cardValues.messages.map((item) => (\r\n              <div key={item.id} >\r\n                <div className=\"cardinfo-box-task-user\">\r\n                  <img src={Avatar} className=\"cardinfo-img\" alt=\"\" />\r\n                  <p>{user}</p>\r\n                </div>\r\n                  <div className=\"cardinfo-box-task-trash\">\r\n                    <p>{item.text}</p>\r\n                    <IconButton aria-label=\"delete\" onClick={() => removeCom(item.id)}>\r\n                      <DeleteIcon  />\r\n                    </IconButton>\r\n                  </div>\r\n\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <CustomInput\r\n            text={\"Add a comment\"}\r\n            placeholder=\"Enter comment\"\r\n            onSubmit={addCom}\r\n          />\r\n        </div>\r\n\r\n\r\n        {/*DATE*/}\r\n        <div className=\"cardinfo-box\">\r\n          <div className=\"cardinfo-box-title\">\r\n            <Calendar />\r\n            <p>Date</p>\r\n          </div>\r\n          <input\r\n            type=\"date\"\r\n            defaultValue={cardValues.date}\r\n            // substr or slice ?\r\n            min={new Date().toISOString().slice(0, 10)}\r\n            onChange={(event) => updateDate(event.target.value)}\r\n          />\r\n        </div>\r\n\r\n        {/*LABELS*/}\r\n        <div className=\"cardinfo-box\">\r\n          <div className=\"cardinfo-box-title\">\r\n            <Tag />\r\n            <p>Labels</p>\r\n          </div>\r\n          <div className=\"cardinfo-box-labels\">\r\n            {cardValues.labels?.map((item, index) => (\r\n              <Chip key={index} item={item} removeLabel={removeLabel} />\r\n            ))}\r\n          </div>\r\n          <ul>\r\n            {colorsList.map((item, index) => (\r\n              <li\r\n                key={index}\r\n                style={{ backgroundColor: item }}\r\n                className={selectedColor === item ? \"li-active\" : \"\"}\r\n                onClick={() => setSelectedColor(item)}\r\n              />\r\n            ))}\r\n          </ul>\r\n          <CustomInput\r\n            text=\"Add Label\"\r\n            placeholder=\"Enter label text\"\r\n            onSubmit={(value: string) =>\r\n              addLabel({ color: selectedColor, text: value })\r\n            }\r\n          />\r\n        </div>\r\n\r\n        {/*TASKS*/}\r\n        <div className=\"cardinfo-box\">\r\n          <div className=\"cardinfo-box-title\">\r\n            <CheckSquare />\r\n            <p>Tasks</p>\r\n          </div>\r\n\r\n          <div className=\"cardinfo-box-progress-bar\">\r\n            <div\r\n              className=\"cardinfo-box-progress\"\r\n              style={{\r\n                width: `${calculatedPercent}%`,\r\n                backgroundColor: calculatedPercent === 100 ? \"limegreen\" : \"\",\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"cardinfo-box-task-list\">\r\n            {cardValues.tasks?.map((item) => (\r\n              <div key={item.id} className=\"cardinfo-box-task-checkbox\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  defaultChecked={item.completed}\r\n                  onChange={(event) =>\r\n                    updateTask(item.id, event.target.checked)\r\n                  }\r\n                />\r\n                <p className={item.completed ? \"completed\" : \"\"}>{item.text}</p>\r\n                <IconButton aria-label=\"delete\" onClick={() => removeTask(item.id)}>\r\n                  <DeleteIcon  />\r\n                </IconButton>\r\n\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <CustomInput\r\n            text={\"Add a Task\"}\r\n            placeholder=\"Enter task\"\r\n            onSubmit={addTask}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default CardInfo;\r\n","import React, { useState } from \"react\";\r\nimport { AlignLeft, CheckSquare, Clock, MessageCircle, MoreHorizontal } from \"react-feather\";\r\nimport { formatDate } from \"../../Helper/Util\";\r\nimport { ICard } from \"../../Interfaces/Kanban\";\r\nimport Chip from \"../Common/Chip\";\r\nimport Dropdown from \"../Dropdown/Dropdown\";\r\n\r\nimport \"./Card.css\";\r\nimport CardInfo from \"./CardInfo/CardInfo\";\r\ninterface CardProps {\r\n  card: ICard;\r\n  boardId: number;\r\n  removeCard: (boardId: number, cardId: number) => void;\r\n  onDragEnd: (boardId: number, cardId: number) => void;\r\n  onDragEnter: (boardId: number, cardId: number) => void;\r\n  updateCard: (boardId: number, cardId: number, card: ICard) => void;\r\n  user:string\r\n  inputText:string\r\n}\r\n\r\n//Карточка без popup\r\nfunction Card(props: CardProps) {\r\n  const { card, boardId, removeCard, onDragEnd, onDragEnter, updateCard,user,inputText} =\r\n    props;\r\n  const { id, title, desc, date, tasks, labels,messages} = card;\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      {showModal && (\r\n        <CardInfo\r\n          inputText={inputText}\r\n          user={user}\r\n          onClose={() => setShowModal(false)}\r\n          card={card}\r\n          boardId={boardId}\r\n          updateCard={updateCard}\r\n        />\r\n      )}\r\n      <div\r\n        className=\"card\"\r\n        key={card.id}\r\n        draggable\r\n        onDragEnd={() => onDragEnd(boardId, id)}\r\n        onDragEnter={() => onDragEnter(boardId, id)}\r\n        onClick={() => setShowModal(true)}\r\n      >\r\n        <div className=\"card-top\">\r\n          <div className=\"card-top-labels\">\r\n            {labels?.map((item, index) => (\r\n              <Chip key={index} item={item} />\r\n            ))}\r\n          </div>\r\n          <div\r\n            className=\"card-top-more\"\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setShowDropdown(true);\r\n            }}\r\n          >\r\n            <MoreHorizontal />\r\n            {showDropdown && (\r\n              <Dropdown\r\n                class=\"board-dropdown\"\r\n                onClose={() => setShowDropdown(false)}\r\n              >\r\n                <p onClick={() => removeCard(boardId, id)}>Delete Card</p>\r\n              </Dropdown>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"card-title\">{title}</div>\r\n        <div className=\"card-item\">\r\n          <p title={desc}>\r\n            <AlignLeft />\r\n          </p>\r\n\r\n          {messages && messages.length > 0 && (\r\n            <p >\r\n              <MessageCircle  />\r\n              {messages?.filter((item) => item).length}\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"card-footer\">\r\n          {date && (\r\n            <p className=\"card-footer-item\">\r\n              <Clock className=\"card-footer-icon\" />\r\n              {formatDate(date)}\r\n            </p>\r\n          )}\r\n          {tasks && tasks?.length > 0 && (\r\n            <p className=\"card-footer-item\">\r\n              <CheckSquare className=\"card-footer-icon\" />\r\n              {tasks?.filter((item) => item.completed)?.length}/{tasks?.length}\r\n            </p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState } from \"react\";\r\nimport { MoreHorizontal } from \"react-feather\";\r\n\r\nimport Card from \"../Card/Card\";\r\nimport Dropdown from \"../Dropdown/Dropdown\";\r\nimport CustomInput from \"../CustomInput/CustomInput\";\r\n\r\nimport \"./Board.css\";\r\nimport { IBoard, ICard } from \"../../Interfaces/Kanban\";\r\n\r\ninterface BoardProps {\r\n  board: IBoard;\r\n  addCard: (boardId: number, title: string) => void;\r\n  removeBoard: (boardId: number) => void;\r\n  removeCard: (boardId: number, cardId: number) => void;\r\n  onDragEnd: (boardId: number, cardId: number) => void;\r\n  onDragEnter: (boardId: number, cardId: number) => void;\r\n  updateCard: (boardId: number, cardId: number, card: ICard) => void;\r\n  user:string\r\n}\r\n\r\nfunction Board(props: BoardProps) {\r\n  const {\r\n    board,\r\n    addCard,\r\n    removeBoard,\r\n    removeCard,\r\n    onDragEnd,\r\n    onDragEnter,\r\n    updateCard,\r\n    user,\r\n\r\n  } = props;\r\n  const [inputText, setInputText] = useState(board.title);\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputText(event.target.value);\r\n  };\r\n\r\n\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  return (\r\n    <div className=\"board\">\r\n      <div className=\"board-inner\" key={board?.id}>\r\n        <div className=\"board-header\">\r\n          <p className=\"board-header-title\">\r\n            <input className=\"custom-input\"\r\n                   value={inputText || \"\"}\r\n                   type=\"text\"\r\n                   autoFocus\r\n                   onChange={handleChange}\r\n\r\n            />\r\n            <span>{board?.cards?.length || 0}</span>\r\n          </p>\r\n          <div\r\n            className=\"board-header-title-more\"\r\n            onClick={() => setShowDropdown(true)}\r\n          >\r\n            <MoreHorizontal />\r\n            {showDropdown && (\r\n              <Dropdown\r\n                class=\"board-dropdown\"\r\n                onClose={() => setShowDropdown(false)}\r\n              >\r\n                <p onClick={() => removeBoard(board?.id)}>Delete Board</p>\r\n              </Dropdown>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"board-cards custom-scroll\">\r\n          {board?.cards?.map((item) => (\r\n            <Card\r\n              inputText={board.title}\r\n              user={user}\r\n              key={item.id}\r\n              card={item}\r\n              boardId={board.id}\r\n              removeCard={removeCard}\r\n              onDragEnter={onDragEnter}\r\n              onDragEnd={onDragEnd}\r\n              updateCard={updateCard}\r\n            />\r\n          ))}\r\n          <CustomInput\r\n            text=\"+ Add Card\"\r\n            placeholder=\"Enter Card Title\"\r\n            displayClass=\"board-add-card\"\r\n            editClass=\"board-add-card-edit\"\r\n            onSubmit={(value: string) => addCard(board?.id, value)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import { IBoard } from \"../Interfaces/Kanban\";\r\n\r\nexport const ApiMockResponse: IBoard[] = [\r\n  {\r\n    id: 1651319512266.7095,\r\n    title: \"ToDo\",\r\n    cards: [\r\n      {\r\n        id: 1651319552926.0933,\r\n        title: \"Task1\",\r\n        labels: [{ color: \"#cf61a1\", text: \"Urgent\" }],\r\n        date: \"2022-11-06\",\r\n        tasks: [\r\n          { id: 1651319625559.8025, completed: true, text: \"Task1_subtask1\" },\r\n          { id: 1651319629650.8945, completed: true, text: \"Task1_subtask2\" },\r\n          { id: 1651319633774.9905, completed: true, text: \"Task1_subtask3\" },\r\n        ],\r\n        desc: \"Task1 Detail Description\",\r\n        messages:[\r\n          {id:1651319543435.593,text: \"Task1_subtask1\",user:\"\"}\r\n        ]\r\n      },\r\n      {\r\n        id: 1651319568365.593,\r\n        title: \"Task2\",\r\n        labels: [{ color: \"#1ebffa\", text: \"Frontend\" }],\r\n        date: \"\",\r\n        tasks: [],\r\n        messages:[\r\n          {id:1651319543435.593,text: \"Task1_subtask1\",user:\"\"}\r\n        ]\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    id: 1651319523126.113,\r\n    title: \"In Progress\",\r\n    cards: [\r\n      {\r\n        id: 1651319672685.5078,\r\n        title: \"Task3\",\r\n        labels: [{ color: \"#9975bd\", text: \"Database\" }],\r\n        date: \"\",\r\n        tasks: [\r\n          { id: 1651319728301.3855, completed: false, text: \"Redux\" },\r\n        ],\r\n        desc: \"Task1 Detail Description\",\r\n        messages:[\r\n          {id:1651319543435.593,text: \"Task1_subtask1\",user:\"\"}\r\n        ]\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    id: 1651319530017.122,\r\n    title: \"Testing\",\r\n    cards: [\r\n      {\r\n        id: 1651319677070.0732,\r\n        title: \"Task4\",\r\n        labels: [{ color: \"#8da377\", text: \"figma\" }],\r\n        date: \"2022-11-06\",\r\n        tasks: [],\r\n        desc: \"Task1 Detail Description\",\r\n        messages:[\r\n          {id:1651319543435.593,text: \"Task1_subtask1\",user:\"\"}\r\n        ]\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    id: 1651319535931.4182,\r\n    title: \"Done\",\r\n    cards: [\r\n      {\r\n        id: 1651319680948.0479,\r\n        title: \"Task5\",\r\n        labels: [{ color: \"#4fcc25\", text: \"Payment API\" }],\r\n        date: \"2022-11-06\",\r\n        tasks: [\r\n          { id: 1651319833779.3252, completed: true, text: \"Restful API\" },\r\n        ],\r\n        desc: \"Task1 Detail Description\",\r\n        messages:[\r\n          {id:1651319543435.593,text: \"Task1_subtask1\",user:\"\"}\r\n        ]\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n","import { ApiMockResponse } from \"../ApiMockData/dummyData\";\r\nimport { IBoard } from \"../Interfaces/Kanban\";\r\n\r\nconst LocalStorageKeyName = \"kanban-boards\";\r\n//Data Layer\r\nexport class BoardAPI {\r\n  async fetchBoardList(): Promise<IBoard[]> {\r\n    const apiData: IBoard[] = ApiMockResponse;\r\n    let BoardList: IBoard[];\r\n    //first check local storage if local storage is empty then add api mock data as seed\r\n    if (localStorage.getItem(LocalStorageKeyName)) {\r\n      const localStorageData: IBoard[] = JSON.parse(\r\n        localStorage.getItem(LocalStorageKeyName) ?? \"\",\r\n      );\r\n      BoardList = [...localStorageData];\r\n    } else {\r\n      BoardList = [...apiData];\r\n      updateLocalStorageBoards(BoardList);\r\n    }\r\n\r\n    return BoardList;\r\n\r\n  }\r\n} //BoardAPI Class End\r\n\r\n//Business Layer\r\nexport async function fetchBoardList(): Promise<IBoard[]> {\r\n  const api = new BoardAPI();\r\n  return api.fetchBoardList();\r\n}\r\nexport function updateLocalStorageBoards(boards: IBoard[]) {\r\n  localStorage.setItem(LocalStorageKeyName, JSON.stringify(boards));\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Board from \"../Components/Board/Board\";\r\nimport \"./Dashboard.css\";\r\nimport CustomInput from \"../Components/CustomInput/CustomInput\";\r\nimport { ICard, IBoard } from \"../Interfaces/Kanban\";\r\nimport { fetchBoardList, updateLocalStorageBoards } from \"../Helper/APILayers\";\r\nimport Avatar from \"../asserts/images/user.png\";\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport Modal from '@mui/material/Modal';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\nfunction Dashboard() {\r\n  const [boards, setBoards] = useState<IBoard[]>([]);\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  async function fetchData() {\r\n    const boards: IBoard[] = await fetchBoardList();\r\n    setBoards(boards);\r\n  }\r\n\r\n  const [targetCard, setTargetCard] = useState({\r\n    boardId: 0,\r\n    cardId: 0,\r\n  });\r\n\r\n\r\n  const addBoardHandler = (name: string) => {\r\n    const tempBoardsList = [...boards];\r\n    tempBoardsList.push({\r\n      id: Date.now() + Math.random() * 2,\r\n      title: name,\r\n      cards: [],\r\n    });\r\n    setBoards(tempBoardsList);\r\n  };\r\n\r\n  const removeBoard = (boardId: number) => {\r\n    const boardIndex = boards.findIndex((item: IBoard) => item.id === boardId);\r\n    if (boardIndex < 0) return;\r\n\r\n    const tempBoardsList = [...boards];\r\n    tempBoardsList.splice(boardIndex, 1);\r\n    setBoards(tempBoardsList);\r\n  };\r\n\r\n  const addCardHandler = (boardId: number, title: string) => {\r\n    const boardIndex = boards.findIndex((item: IBoard) => item.id === boardId);\r\n    if (boardIndex < 0) return;\r\n\r\n    const tempBoardsList = [...boards];\r\n    tempBoardsList[boardIndex].cards.push({\r\n      id: Date.now() + Math.random() * 2,\r\n      title,\r\n      labels: [],\r\n      date: \"\",\r\n      tasks: [],\r\n      desc: \"\",\r\n      messages: [],\r\n\r\n\r\n\r\n    });\r\n    setBoards(tempBoardsList);\r\n  };\r\n\r\n  const removeCard = (boardId: number, cardId: number) => {\r\n    const boardIndex = boards.findIndex((item: IBoard) => item.id === boardId);\r\n    if (boardIndex < 0) return;\r\n\r\n    const tempBoardsList = [...boards];\r\n    const cards = tempBoardsList[boardIndex].cards;\r\n\r\n    const cardIndex = cards.findIndex((item) => item.id === cardId);\r\n    if (cardIndex < 0) return;\r\n\r\n    cards.splice(cardIndex, 1);\r\n    setBoards(tempBoardsList);\r\n  };\r\n\r\n  const updateCard = (boardId: number, cardId: number, card: ICard) => {\r\n    const boardIndex = boards.findIndex((item) => item.id === boardId);\r\n    if (boardIndex < 0) return;\r\n\r\n    const tempBoardsList = [...boards];\r\n    const cards = tempBoardsList[boardIndex].cards;\r\n\r\n    const cardIndex = cards.findIndex((item) => item.id === cardId);\r\n    if (cardIndex < 0) return;\r\n\r\n    tempBoardsList[boardIndex].cards[cardIndex] = card;\r\n\r\n    setBoards(tempBoardsList);\r\n  };\r\n\r\n  const onDragEnd = (boardId: number, cardId: number) => {\r\n    const sourceBoardIndex = boards.findIndex(\r\n      (item: IBoard) => item.id === boardId,\r\n    );\r\n    if (sourceBoardIndex < 0) return;\r\n\r\n    const sourceCardIndex = boards[sourceBoardIndex]?.cards?.findIndex(\r\n      (item) => item.id === cardId,\r\n    );\r\n    if (sourceCardIndex < 0) return;\r\n\r\n    const targetBoardIndex = boards.findIndex(\r\n      (item: IBoard) => item.id === targetCard.boardId,\r\n    );\r\n    if (targetBoardIndex < 0) return;\r\n\r\n    const targetCardIndex = boards[targetBoardIndex]?.cards?.findIndex(\r\n      (item) => item.id === targetCard.cardId,\r\n    );\r\n    if (targetCardIndex < 0) return;\r\n\r\n    const tempBoardsList = [...boards];\r\n    const sourceCard = tempBoardsList[sourceBoardIndex].cards[sourceCardIndex];\r\n    tempBoardsList[sourceBoardIndex].cards.splice(sourceCardIndex, 1);\r\n    tempBoardsList[targetBoardIndex].cards.splice(\r\n      targetCardIndex,\r\n      0,\r\n      sourceCard,\r\n    );\r\n    setBoards(tempBoardsList);\r\n\r\n    setTargetCard({\r\n      boardId: 0,\r\n      cardId: 0,\r\n    });\r\n  };\r\n\r\n  const onDragEnter = (boardId: number, cardId: number) => {\r\n    if (targetCard.cardId === cardId) return;\r\n    setTargetCard({\r\n      boardId: boardId,\r\n      cardId: cardId,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateLocalStorageBoards(boards);\r\n  }, [boards]);\r\n\r\n\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  const [user, setUser] = React.useState('Anton');\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setUser(event.target.value);\r\n  };\r\n\r\n  const style = {\r\n    position: 'absolute' as 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor: 'background.paper',\r\n    border: '2px solid #000',\r\n    boxShadow: 24,\r\n    p: 4,\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app-nav\">\r\n        <h1>Kanban Board</h1>\r\n\r\n        <div className=\"app-nav-form\">\r\n          <img src={Avatar} className=\"app-nav-form-img\" alt=\"\" />\r\n\r\n          <div>\r\n            <Button variant=\"contained\" onClick={handleOpen}>Login</Button>\r\n            <Modal\r\n              open={open}\r\n              onClose={handleClose}\r\n              aria-labelledby=\"modal-modal-title\"\r\n              aria-describedby=\"modal-modal-description\"\r\n            >\r\n              <Box sx={style}>\r\n                <Typography className=\"typography-modal\" id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n                  Введите имя автора\r\n                </Typography>\r\n                <div className=\"form\">\r\n                  <TextField\r\n                    id=\"outlined-name\"\r\n                    label=\"Name\"\r\n                    value={user}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <Button onClick={handleClose}>Login</Button>\r\n                </div>\r\n              </Box>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"app-boards-container\">\r\n        <div className=\"app-boards\">\r\n          {boards.map((item) => (\r\n            <Board\r\n              user={user}\r\n              key={item.id}\r\n              board={item}\r\n              addCard={addCardHandler}\r\n              removeBoard={() => removeBoard(item.id)}\r\n              removeCard={removeCard}\r\n              onDragEnd={onDragEnd}\r\n              onDragEnter={onDragEnter}\r\n              updateCard={updateCard}\r\n            />\r\n          ))}\r\n          <div className=\"app-boards-last\">\r\n            <CustomInput\r\n              displayClass=\"app-boards-add-board\"\r\n              editClass=\"app-boards-add-board-edit\"\r\n              placeholder=\"Enter Board Name\"\r\n              text=\"Add Board\"\r\n              buttonText=\"Add Board\"\r\n              onSubmit={addBoardHandler}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import Dashboard from \"./Home/Dashboard\";\r\n\r\nfunction App() {\r\n  return <Dashboard />;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n);\r\n"],"sourceRoot":""}